- name: Compute vars (binary)
  set_fact:
    beat_url: "{{url_base}}/{{beat_name}}/{{beat_name}}-{{version}}-{{rpm_arch}}.tar.gz"
    beat_pkg: "{{beat_name}}-{{version}}-{{rpm_arch}}.tar.gz"
    beat_cfg: "/tmp/{{beat_name}}-{{version}}-{{rpm_arch}}/{{beat_name}}.yml"
    workdir: /tmp
    installdir: /tmp/{{beat_name}}-{{version}}-{{rpm_arch}}

- name: Ensure empty output directory
  file: path={{workdir}}/output state=absent

- name: Download package sha1
  get_url: url={{beat_url}}.sha1.txt dest={{workdir}} validate_certs=no

- name: Download package
  get_url: url={{beat_url}} dest={{workdir}} validate_certs=no

- name: Check file (linux)
  shell: chdir={{workdir}} sha1sum -c {{beat_pkg}}.sha1.txt

- name: Create install directory
  file: path={{installdir}} state=directory

- name: Untar
  shell: chdir={{installdir}} tar xzvf {{workdir}}/{{beat_pkg}} --strip 1

- name: Minimal configuration file
  template: src={{beat_name}}.yml dest={{beat_cfg}}

- name: Start in bg
  shell: chdir={{installdir}} ./{{beat_name}} -c {{beat_name}}.yml
  async: 45
  poll: 0  # run in bg

- name: Sleep a little
  shell: sleep 1
  always_run: true

- name: Curl something (linux)
  shell: wget google.com
  when: beat_name == "packetbeat"

- name: Wait for the output file to be created, should contain type=http
  wait_for: >
    path={{workdir}}/output/packetbeat timeout=5
    search_regex='"type":"http"'
  when: beat_name == "packetbeat"

- name: Wait for the output file to be created, should contain system load
  wait_for: >
    path={{workdir}}/output/topbeat timeout=5
    search_regex='"load"'
  when: beat_name == "topbeat"
